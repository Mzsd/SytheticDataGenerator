from multiprocessing import Process, Queue
from sqlalchemy import create_engine
from dotenv import load_dotenv
from datetime import datetime
import random
import time


class APICaller():
    
    def __init__(self, pizza_df) -> None:
        self.pizza_df = pizza_df
        self.numbers = list(range(0, len(self.pizza_df)))
        
    ### Functions to generate random pizza data
    #
    #
    def select_random_pizza(self, penalty_factor=0.1):
        weights = (1 / self.pizza_df['unit_price']).to_list()
        
        max_weight = max(weights)

        penalized_weights = [weight if weight == max_weight else weight * penalty_factor for weight in weights]
        return random.choices(self.numbers, penalized_weights)[0]
        
    def get_random_number_pizzas(self, first_prob=0.9):
        first_prob = 0.9
        pizza_weights = [first_prob] + [
            (1 - first_prob) / (i - 1 ) ** 2
            for i in self.numbers[2:]
        ]

        return random.choices(self.numbers[1:], pizza_weights)[0]
    
    def get_random_qty_pizzas(self, first_prob=0.8):
        qty = list(range(1, 11))
        pizza_weights = [first_prob] + [
            (1 - first_prob) / (i - 1 ) ** 2
            for i in qty[1:]
        ]

        return random.choices(qty, pizza_weights)[0]
    
    def gen_order(self, queue, process_id=0):
        
        order_num = 0
        while not queue.empty():
            order_num += 1
            timestamp = queue.get()
            time_now = datetime.now()
            wait_time = timestamp - (int(time_now.strftime("%M")) * 60 + int(time_now.strftime("%S")))
            timestamp_datetime = datetime.now().replace(minute=timestamp // 60, second=timestamp % 60)
                        
            if wait_time > 0:
                print(f"\n[+] Process {process_id} waiting for {wait_time} seconds to generate order")
                time.sleep(wait_time)

            print(f"\n[+] Process {process_id} generating order at {datetime.now().strftime('%H:%M:%S')} and original timestamp {timestamp_datetime.strftime('%H:%M:%S')}")
            number_pizzas = self.get_random_number_pizzas()
                       
            order = [
                {
                    "pizza": self.pizza_df.iloc[self.select_random_pizza()], 
                    "quantity": self.get_random_qty_pizzas()
                }
                for _ in range(number_pizzas)
            ]
                
            print(f"\n[+] Process {process_id} generated order: {order}")
        
        print(f"\n\n[+] Total orders generated by process {process_id}: {order_num}\n")